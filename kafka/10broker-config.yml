kind: ConfigMap
metadata:
  name: broker-config
  namespace: dev
apiVersion: v1
data:
  init.sh: |-
    #!/bin/bash
    set -e
    set -x
    cp /etc/kafka-configmap/log4j.properties /etc/kafka/
    cp /etc/kafka-configmap/kafka-move-leadership.sh /etc/kafka/

    KAFKA_BROKER_ID=${HOSTNAME##*-}
    SEDS=("s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/")
    LABELS="kafka-broker-id=$KAFKA_BROKER_ID"
    ANNOTATIONS=""

    hash kubectl 2>/dev/null || {
      SEDS+=("s/#init#broker.rack=#init#/#init#broker.rack=# kubectl not found in path/")
    } && {
      ZONE=$(kubectl get node "$NODE_NAME" -o=go-template='{{index .metadata.labels "failure-domain.beta.kubernetes.io/zone"}}')
      if [ "x$ZONE" == "x<no value>" ]; then
        SEDS+=("s/#init#broker.rack=#init#/#init#broker.rack=# zone label not found for node $NODE_NAME/")
      else
        SEDS+=("s/#init#broker.rack=#init#/broker.rack=$ZONE/")
        LABELS="$LABELS kafka-broker-rack=$ZONE"
      fi

      OUTSIDE_HOST=$(kubectl get node "$NODE_NAME" -o jsonpath='{.status.addresses[?(@.type=="InternalIP")].address}')
      OUTSIDE_PORT=32400
      SEDS+=("s|#init#advertised.listeners=PLAINTEXT://#init#|advertised.listeners=PLAINTEXT://:9092,OUTSIDE://${OUTSIDE_HOST}:${OUTSIDE_PORT}|")
      ANNOTATIONS="$ANNOTATIONS kafka-listener-outside-host=$OUTSIDE_HOST kafka-listener-outside-port=$OUTSIDE_PORT"

      if [ ! -z "$LABELS" ]; then
        kubectl -n $POD_NAMESPACE label pod $POD_NAME $LABELS || echo "Failed to label $POD_NAMESPACE.$POD_NAME - RBAC issue?"
      fi
      if [ ! -z "$ANNOTATIONS" ]; then
        kubectl -n $POD_NAMESPACE annotate pod $POD_NAME $ANNOTATIONS || echo "Failed to annotate $POD_NAMESPACE.$POD_NAME - RBAC issue?"
      fi
    }
    printf '%s\n' "${SEDS[@]}" | sed -f - /etc/kafka-configmap/server.properties > /etc/kafka/server.properties.tmp
    [ $? -eq 0 ] && mv /etc/kafka/server.properties.tmp /etc/kafka/server.properties
  server.properties: |-
    ############################# Log Basics #############################

    # A comma seperated list of directories under which to store log files
    # Overrides log.dir
    log.dirs=/var/lib/kafka/data/topics

    # The default number of log partitions per topic. More partitions allow greater
    # parallelism for consumption, but this will also result in more files across
    # the brokers.
    num.partitions=12

    default.replication.factor=3

    min.insync.replicas=2

    auto.create.topics.enable=false

    # The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
    # This value is recommended to be increased for installations with data dirs located in RAID array.
    #num.recovery.threads.per.data.dir=1

    ############################# Server Basics #############################

    # The id of the broker. This must be set to a unique integer for each broker.
    #init#broker.id=#init#

    #init#broker.rack=#init#

    ############################# Socket Server Settings #############################

    # The address the socket server listens on. It will get the value returned from
    # java.net.InetAddress.getCanonicalHostName() if not configured.
    #   FORMAT:
    #     listeners = listener_name://host_name:port
    #   EXAMPLE:
    #     listeners = PLAINTEXT://your.host.name:9092
    #listeners=PLAINTEXT://:9092
    listeners=PLAINTEXT://:9092,OUTSIDE://:9094

    # Hostname and port the broker will advertise to producers and consumers. If not set,
    # it uses the value for "listeners" if configured.  Otherwise, it will use the value
    # returned from java.net.InetAddress.getCanonicalHostName().
    #advertised.listeners=PLAINTEXT://your.host.name:9092
    #init#advertised.listeners=PLAINTEXT://#init#

    # Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
    #listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
    listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL,OUTSIDE:PLAINTEXT
    inter.broker.listener.name=PLAINTEXT

    # The number of threads that the server uses for receiving requests from the network and sending responses to the network
    #num.network.threads=3

    # The number of threads that the server uses for processing requests, which may include disk I/O
    #num.io.threads=8

    # The send buffer (SO_SNDBUF) used by the socket server
    #socket.send.buffer.bytes=102400

    # The receive buffer (SO_RCVBUF) used by the socket server
    #socket.receive.buffer.bytes=102400

    # The maximum size of a request that the socket server will accept (protection against OOM)
    #socket.request.max.bytes=104857600

    ############################# Internal Topic Settings  #############################
    # The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
    # For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
    #offsets.topic.replication.factor=1
    #transaction.state.log.replication.factor=1
    #transaction.state.log.min.isr=1

    ############################# Log Flush Policy #############################

    # Messages are immediately written to the filesystem but by default we only fsync() to sync
    # the OS cache lazily. The following configurations control the flush of data to disk.
    # There are a few important trade-offs here:
    #    1. Durability: Unflushed data may be lost if you are not using replication.
    #    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
    #    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
    # The settings below allow one to configure the flush policy to flush data after a period of time or
    # every N messages (or both). This can be done globally and overridden on a per-topic basis.

    # The number of messages to accept before forcing a flush of data to disk
    #log.flush.interval.messages=10000

    # The maximum amount of time a message can sit in a log before we force a flush
    #log.flush.interval.ms=1000

    ############################# Log Retention Policy #############################

    # The following configurations control the disposal of log segments. The policy can
    # be set to delete segments after a period of time, or after a given size has accumulated.
    # A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
    # from the end of the log.

    # https://cwiki.apache.org/confluence/display/KAFKA/KIP-186%3A+Increase+offsets+retention+default+to+7+days
    offsets.retention.minutes=10080

    # The minimum age of a log file to be eligible for deletion due to age
    log.retention.hours=-1

    # A size-based retention policy for logs. Segments are pruned from the log unless the remaining
    # segments drop below log.retention.bytes. Functions independently of log.retention.hours.
    #log.retention.bytes=1073741824

    # The maximum size of a log segment file. When this size is reached a new log segment will be created.
    #log.segment.bytes=1073741824

    # The interval at which log segments are checked to see if they can be deleted according
    # to the retention policies
    #log.retention.check.interval.ms=300000

    ############################# Zookeeper #############################

    # Zookeeper connection string (see zookeeper docs for details).
    # This is a comma separated host:port pairs, each corresponding to a zk
    # server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
    # You can also append an optional chroot string to the urls to specify the
    # root directory for all kafka znodes.
    zookeeper.connect=zookeeper:2181

    # Timeout in ms for connecting to zookeeper
    #zookeeper.connection.timeout.ms=6000


    ############################# Group Coordinator Settings #############################

    # The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
    # The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
    # The default value for this is 3 seconds.
    # We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
    # However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
    #group.initial.rebalance.delay.ms=0

  log4j.properties: |-
    # Unspecified loggers and loggers with additivity=true output to server.log and stdout
    # Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise
    log4j.rootLogger=INFO, stdout

    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log
    log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log
    log4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log
    log4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log
    log4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log
    log4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    log4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log
    log4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n

    # Change the two lines below to adjust ZK client logging
    log4j.logger.org.I0Itec.zkclient.ZkClient=INFO
    log4j.logger.org.apache.zookeeper=INFO

    # Change the two lines below to adjust the general broker logging level (output to server.log and stdout)
    log4j.logger.kafka=INFO
    log4j.logger.org.apache.kafka=INFO

    # Change to DEBUG or TRACE to enable request logging
    log4j.logger.kafka.request.logger=WARN, requestAppender
    log4j.additivity.kafka.request.logger=false

    # Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output
    # related to the handling of requests
    #log4j.logger.kafka.network.Processor=TRACE, requestAppender
    #log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender
    #log4j.additivity.kafka.server.KafkaApis=false
    log4j.logger.kafka.network.RequestChannel$=WARN, requestAppender
    log4j.additivity.kafka.network.RequestChannel$=false

    log4j.logger.kafka.controller=TRACE, controllerAppender
    log4j.additivity.kafka.controller=false

    log4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender
    log4j.additivity.kafka.log.LogCleaner=false

    log4j.logger.state.change.logger=TRACE, stateChangeAppender
    log4j.additivity.state.change.logger=false

    # Change to DEBUG to enable audit log for the authorizer
    log4j.logger.kafka.authorizer.logger=WARN, authorizerAppender
    log4j.additivity.kafka.authorizer.logger=false

  kafka-move-leadership.sh: |-
    #!/usr/bin/env bash
    #
    # File:      kafka-move-leadership.sh
    #
    # Description
    # ===========
    #
    # Generates a Kafka partition reassignment JSON snippet to STDOUT to move the leadership
    # of any replicas away from the provided "source" broker to different, randomly selected
    # "target" brokers.  Run this script with `-h` to show detailed usage instructions.
    #
    #
    # Requirements
    # ============
    # - Kafka 0.8.1.1 and later.
    #
    #
    # Usage
    # =====
    #
    # To show usage instructions run this script with `-h` or `--help`.
    #
    #
    # Full workflow
    # =============
    #
    # High-level overview
    # -------------------
    #
    # 1. Use this script to generate a partition reassignment JSON file.
    # 2. Start the actual reassignment operation via Kafka's `kafka-reassign-partitions.sh` script and this JSON file.
    # 3. Monitor the progress of the reassignment operation with Kafka's `kafka-reassign-partitions.sh` script.
    #
    #
    # Broad Specific Example to decomission node 0
    # -------
    #
    # Step 1 (generate reassignment JSON; this script):
    #     $ unset JMX_PORT; ./kafka-move-leadership.sh --broker-id 0 --first-broker-id 0 --last-broker-id 3 --zookeeper zookeeper:2181 > partitions-to-move.json
    #
    # Step 2 (start reassignment process; Kafka built-in script):
    #
    #     $ unset JMX_PORT; kafka-reassign-partitions.sh --zookeeper zookeeper:2181 --reassignment-json-file partitions-to-move.json --execute
    #
    # Step 3 (monitor progress of reassignment process; Kafka built-in script):
    #
    #     $ unset JMX_PORT; kafka-reassign-partitions.sh --zookeeper zookeeper:2181 --reassignment-json-file partitions-to-move.json --verify
    #
    # Step 4 (shutdown the Kafka Server)
    #     $ unset JMX_PORT; kafka-server-stop.sh
    #
    # Example
    # -------
    #
    # NOTE: If you have installed the Confluent package of Kafka, then the CLI tool
    #       `kafka-reassign-partitions.sh` is called `kafka-reassign-partitions`.
    #
    # Step 1 (generate reassignment JSON; this script):
    #
    #    $ kafka-move-leadership.sh --broker-id 4 --first-broker-id 0 --last-broker-id 8 --zookeeper zookeeper1:2181 > partitions-to-move.json
    #
    # Step 2 (start reassignment process; Kafka built-in script):
    #
    #    $ kafka-reassign-partitions.sh --zookeeper zookeeper1:2181 --reassignment-json-file partitions-to-move.json --execute
    #
    # Step 3 (monitor progress of reassignment process; Kafka built-in script):
    #
    #    $ kafka-reassign-partitions.sh --zookeeper zookeeper:2181 --reassignment-json-file partitions-to-move.json --verify


    declare -r MYSELF=`basename $0`

    print_usage() {
    echo "$MYSELF - generates a Kafka partition reassignment JSON snippet to move partition leadership away from a broker (details below)"
    echo
    echo "Usage: $MYSELF [OPTION]..."
    echo
    echo "    --broker-id            Move leadership of all replicas, if any, from this broker"
    echo "                           to different, randomly selected brokers.  Example: 4"
    echo "    --first-broker-id      First (= lowest) Kafka broker ID in the cluster.  Used as"
    echo "                           the start index for the range of broker IDs from which"
    echo "                           replacement brokers will be randomly selected.  Example: 0"
    echo "    --last-broker-id       Last (= highest) Kafka broker ID in the cluster.  Used as"
    echo "                           the end index for the range of broker IDs from which"
    echo "                           replacement brokers will be randomly selected.  Example: 8"
    echo "    --zookeeper            Comma-separated list of ZK servers with which the brokers"
    echo "                           are registered.  Example: zookeeper1:2181,zookeeper2:2181"
    echo "    -h, --help             Print this help message and exit."
    echo
    echo "Example"
    echo "-------"
    echo
    echo "The following example prints a partition reassignment JSON snippet to STDOUT that moves leadership"
    echo "from the broker with ID 4 to brokers randomly selected from the ID range 0,1,2,3,4,5,6,7,8"
    echo "(though 4 itself will be excluded from the range automatically):"
    echo
    echo "    $ $MYSELF --broker-id 4 --first-broker-id 0 --last-broker-id 8 --zookeeper zookeeper1:2181"
    echo
    echo "Use cases include:"
    echo "------------------"
    echo "  1. Safely restarting a broker while minimizing risk of data loss."
    echo "  2. Replacing a broker."
    echo "  3. Preparing a broker for maintenance."
    echo
    echo "Detailed description"
    echo "--------------------"
    echo "Generates a Kafka partition reassignment JSON snippet to STDOUT"
    echo "to move the leadership of any replicas from the provided broker ID to"
    echo "different, randomly selected broker IDs."
    echo
    echo "This JSON snippet can be saved to a file and then be used as an argument for:"
    echo
    echo "    $ kafka-reassign-partitions.sh --reassignment-json-file my.json"
    echo
    echo "Further information"
    echo "-------------------"
    echo "- http://kafka.apache.org/documentation.html#basic_ops_cluster_expansion"
    echo "- https://cwiki.apache.org/confluence/display/KAFKA/Replication+tools#Replicationtools-6.ReassignPartitionsTool"
    }

    if [[ $# -eq 0 ]]; then
    print_usage
    exit 97
    fi

    while [[ $# -gt 0 ]]; do
    case "$1" in
      --broker-id)
        shift
        declare -r BROKER="$1"
        shift
        ;;
      --zookeeper)
        shift
        declare -r ZOOKEEPER_CONNECT="$1"
        shift
        ;;
      --first-broker-id)
        shift
        declare -r KAFKA_FIRST_BROKER_ID="$1"
        shift
        ;;
      --last-broker-id)
        shift
        declare -r KAFKA_LAST_BROKER_ID="$1"
        shift
        ;;
      -h|--help)
        print_usage
        exit 98
        ;;
      *)
        echo "ERROR: Unexpected option ${1}"
        echo
        print_usage
        exit 99
        ;;
    esac
    done


    # Input validation
    if [ -z "$BROKER" ]; then
    echo "ERROR: You must set the parameter --broker-id"
    exit 80
    fi

    if [ -z "$ZOOKEEPER_CONNECT" ]; then
    echo "ERROR: You must set the parameter --zookeeper"
    exit 81
    fi

    if [ -z "$KAFKA_FIRST_BROKER_ID" ]; then
    echo "ERROR: You must set the parameter --first-broker-id"
    exit 82
    fi

    if [ -z "$KAFKA_LAST_BROKER_ID" ]; then
    echo "ERROR: You must set the parameter --last-broker-id"
    exit 83
    fi


    ###############################################################################
    ### DEPENDENCIES
    ###############################################################################

    declare -r KAFKA_TOPICS_SCRIPT_NAME_APACHE="kafka-topics.sh"
    declare -r KAFKA_TOPICS_SCRIPT_NAME_CONFLUENT="kafka-topics"
    declare -r FALLBACK_PATH="/opt/kafka_2.10-0.8.2.1/bin"

    which "$KAFKA_TOPICS_SCRIPT_NAME_CONFLUENT" &>/dev/null
    if [ $? -ne 0 ]; then
    which "$KAFKA_TOPICS_SCRIPT_NAME_APACHE" &>/dev/null
    if [ $? -ne 0 ]; then
      declare -r FALLBACK_BIN="$FALLBACK_PATH/$KAFKA_TOPICS_SCRIPT_NAME_APACHE"
      which "$FALLBACK_BIN" &>/dev/null
      if [ $? -ne 0 ]; then
        echo "ERROR: kafka-topics CLI tool (ships with Kafka) not found in PATH."
        exit 70
      else
        declare -r KAFKA_TOPICS_BIN="$FALLBACK_BIN"
      fi
    else
      declare -r KAFKA_TOPICS_BIN="$KAFKA_TOPICS_SCRIPT_NAME_APACHE"
    fi
    else
    declare -r KAFKA_TOPICS_BIN="$KAFKA_TOPICS_SCRIPT_NAME_CONFLUENT"
    fi


    ###############################################################################
    ### MISC CONFIGURATION - DO NOT TOUCH UNLESS YOU KNOW WHAT YOU ARE DOING
    ###############################################################################

    declare -r OLD_IFS="$IFS"


    ###############################################################################
    ### UTILITY FUNCTIONS
    ###############################################################################

    # Checks whether an array (first param) contains an element (second param).
    # Returns 0 if the array contains the element, and 1 if it does not.
    #
    # Usage: array_contains myArray myElement
    function array_contains {
    local array="$1[@]"
    local seeking=$2
    local in=1
    for element in "${!array}"; do
      if [[ $element == $seeking ]]; then
        in=0
        break
      fi
    done
    return $in
    }

    # Randomly selects a broker ID in the range specified by
    # KAFKA_FIRST_BROKER_ID (including) and KAFKA_LAST_BROKER_ID (including).
    #
    # Usage: random_broker  => may return e.g. "6"
    function random_broker {
    shuf -i ${KAFKA_FIRST_BROKER_ID}-${KAFKA_LAST_BROKER_ID} -n 1
    }

    # Randomly selects, from the list of available brokers (range specified by
    # KAFKA_FIRST_BROKER_ID and KAFKA_LAST_BROKER_ID), a broker ID that is not
    # already listed in the provided brokers (first param).
    #
    # Usage: other_broker "1,4,6"  => may return e.g. "2"
    #
    # Note: Do NOT put spaces in the string.  "1,2" is ok, "1, 2" is not.
    function other_broker {
    local brokers_string=$1
    local all_brokers_string=`seq -s "," ${KAFKA_FIRST_BROKER_ID} ${KAFKA_LAST_BROKER_ID}`
    if [ ${#brokers_string} -ge ${#all_brokers_string} ]; then
      local no_other_broker_available=""
      echo $no_other_broker_available
    else
      IFS=$',' read -a brokers <<< "$brokers_string"
      local new_broker=`random_broker`
      while array_contains brokers $new_broker; do
        new_broker=`random_broker`
      done
      echo $new_broker
    fi
    }

    # Returns a list of broker IDs by removing the provided broker ID (second param)
    # from the provided list of original broker IDs (first param).  If the original
    # broker list does not contain the provided broker, the list is returned as is.
    #
    # The list of broker IDs must be a comma-separated list of numbers, e.g. "1,2".
    #
    # Usage: all_but_broker "1,2,3" "3"  => returns "1,2"
    #
    # Note: Do NOT put spaces in the string.  "1,2" is ok, "1, 2" is not.
    function all_but_broker {
    local brokers_string=$1
    local broker=$2
    IFS=$',' read -a brokers <<< "$brokers_string"
    local new_brokers=""
    for curr_broker in "${brokers[@]}"; do
      if [ "$curr_broker" != "$broker" ]; then
        new_brokers="$new_brokers,$curr_broker"
      fi
    done
    # Remove leading comma, if any.
    new_brokers=${new_brokers#","}
    echo $new_brokers
    }

    # Returns a list of broker IDs based on a provided list of broker IDs (first
    # param), where the provided broker ID (second param) is replaced by a
    # randomly selected broker ID that is not already in the original list.
    #
    # Usage: replace_broker "1,2,3" "2"  => may return e.g. "1,3,4"
    #
    # Note: Do NOT put spaces in the string.  "1,2" is ok, "1, 2" is not.
    function replace_broker {
    local brokers_string=$1
    local broker=$2
    local remaining_brokers=`all_but_broker $brokers_string $broker`
    local replacement_broker=`other_broker $brokers_string`
    new_brokers="$remaining_brokers,$replacement_broker"
    # Remove leading comma, if any.
    new_brokers=${new_brokers#","}
    # Remove trailing comma, if any.
    new_brokers=${new_brokers%","}
    echo $new_brokers
    }


    ###############################################################################
    ### MAIN
    ###############################################################################

    # "Header" of JSON file for Kafka partition reassignment
    json="{\n"
    json="$json  \"partitions\": [\n"

    # Actual partition reassignments
    for topicPartitionReplicas in `$KAFKA_TOPICS_BIN --zookeeper $ZOOKEEPER_CONNECT --describe | grep "Leader: $BROKER" | awk '{ print $2"#"$4"#"$8 }'`; do
    # Note: We use '#' as field separator in awk (see above) and here
    # because it is not a valid character for a Kafka topic name.
    IFS=$'#' read -a array <<< "$topicPartitionReplicas"
    topic="${array[0]}"     # e.g. "zerg.hydra"
    partition="${array[1]}" # e.g. "4"
    replicas="${array[2]}"  # e.g. "0,8"  (= comma-separated list of broker IDs)
    new_replicas=`replace_broker $replicas $BROKER`
    if [ -z "$new_replicas" ]; then
      echo "ERROR: Cannot find any replacement broker.  Maybe you have only a single broker in your cluster?"
      exit 60
    fi
    json="$json    {\"topic\": \"${topic}\", \"partition\": ${partition}, \"replicas\": [${new_replicas}] },\n"
    done

    # Remove tailing comma, if any.
    json=${json%",\n"}
    json="${json}\n"

    # "Footer" of JSON file
    json="$json  ],\n"
    json="$json  \"version\": 1\n"
    json="${json}}\n"

    # Print JSON to STDOUT
    echo -e $json


    ###############################################################################
    ### CLEANUP
    ###############################################################################

    IFS="$OLD_IFS"
